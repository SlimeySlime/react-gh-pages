{"version":3,"sources":["Board/Read.js","Board/Write.js","Board/List.js","Board/Testing.js","Board/OnePageBoard.js","Board/TodoComponents/TodoTemplate.js","Board/TodoComponents/TodoContext.js","Board/TodoComponents/TodoHead.js","Board/TodoComponents/TodoItem.js","Board/TodoComponents/TodoList.js","Board/TodoComponents/TodoCreate.js","Board/TodoComponents/TodoApp.js","Board/App.js","index.js"],"names":["Read","React","Component","Write","state","title","content","postBoard","a","alert","axios","post","setState","console","log","handleChange","e","target","name","value","this","Wrap","type","onChange","Button","onClick","syncPost","to","JSON","stringify","styled","div","ListItem","List","boards","no","writer","data","Date","dataAddTest","loadingData","get","response","rows","map","item","key","onSubmit","defaults","baseURL","Testing","board","button","Input","OnePageBoard","useState","boardData","setBoard","inputs","setInputs","nameInput","useRef","placeholder","ref","newBoard","current","focus","filter","TodoTemplateBlock","TodoTemplate","children","initialTodos","id","text","done","TodoReducer","action","concat","todo","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","Provider","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","remains","todos","today","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","TodoItemBlock","CheckCircle","props","css","Text","TodoItem","memo","TodoListBlock","TodoList","CircleButton","open","InsertFormPositioner","InsertForm","form","input","TodoCreate","setOpen","setValue","useTodoNextId","preventDefault","autoFocus","GlobalStyle","createGlobalStyle","TodoApp","App","exact","path","component","Square","Board","squares","Array","fill","i","renderSquare","WinnerCheck","winMatch","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63ecdbac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Read extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                read\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Read;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\n\r\nclass Write extends React.Component {\r\n    state = {\r\n        title : '',\r\n        content : '',\r\n    };\r\n\r\n    syncPost() {\r\n        alert('전송 시작');\r\n        const {title, content} = this.state;\r\n        const post = axios.post(\"https://localhost:3000/board\", {\r\n            title, content\r\n        });\r\n        \r\n        this.setState({\r\n            title : '',\r\n            content : '',\r\n        })\r\n        console.log('post');\r\n    }\r\n\r\n    postBoard = async() => {\r\n        alert('전송 시작');\r\n        try{\r\n            const {title, content} = this.state;\r\n            const post = await axios.post(\"/board\", {\r\n                title, content\r\n            });\r\n            // alert(\"전송중\");\r\n            \r\n            this.setState({\r\n                title : '',\r\n                content : '',\r\n        })\r\n        console.log('post');\r\n        }catch(e){\r\n            alert(e);\r\n        }\r\n        \r\n    }\r\n\r\n    handleChange = (e) => {\r\n        // input 에서 name='title', value='this.state.title'이 전달됨\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name] : value,\r\n        });\r\n    };\r\n\r\n\r\n    render(){\r\n        return(\r\n            <Wrap>\r\n                <h2>Write</h2>\r\n                <p>\r\n                    <input\r\n                        type='text'\r\n                        name='title'\r\n                        onChange={this.handleChange}\r\n                        value={this.state.title}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <textarea\r\n                        type='text'\r\n                        name='content'\r\n                        onChange={this.handleChange}\r\n                        value={this.state.content}\r\n                    />\r\n                </p>\r\n                <Button>\r\n                    <button onClick={this.postBoard}>전송하기</button>\r\n                    <button onClick={this.syncPost}>전송하기(sync)</button>\r\n                    <Link to=\"/\">목록</Link>\r\n                </Button>\r\n                <div>{JSON.stringify(this.state)}</div> \r\n            </Wrap>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst Wrap = styled.div`\r\n    padding : 20px;\r\n    input {\r\n        width : 100%\r\n        height : 20px\r\n        border : 1px solid #ccc;\r\n    }\r\n    textarea {\r\n        width : 100%\r\n        height : 100px;\r\n        border : 1px solid #ccc;\r\n    }\r\n`\r\nconst Button = styled.div`\r\n    padding : 20px;\r\n    border-top : 1px solid #ccc;\r\n    button {\r\n        float : left;\r\n        margin : 5px;\r\n        padding : 10px 20px;\r\n        border-radius : 5px;\r\n        text-decoration : none;\r\n        background : #212121;\r\n        color : #fff;\r\n        font-size : 16px;\r\n    }\r\n    a {\r\n        float : left;\r\n        margin : 5px;\r\n        padding : 10px 20px;\r\n        border : 1px solid #ddd;\r\n        border-radius : 5px;\r\n        text-decoration : none;\r\n        background : #212121;\r\n        color : #fff;\r\n        font-size : 16px;\r\n    }\r\n`\r\n\r\nexport default Write;","import React, { Component } from 'react'; \r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrap = styled.div`\r\n    padding : 20px;\r\n`\r\nconst Button = styled.div`\r\n    border-top:1px solid #eee;\r\n    padding : 20px;\r\n    a {\r\n        float : left;\r\n        padding : 10px 20px;\r\n        text-decoration : none;\r\n        border-radius : 5px;\r\n        background : #212121;\r\n        color : #fff;\r\n    }\r\n`\r\nconst ListItem = styled.div`\r\n    width : 100%;\r\n    border-top : 1px solid;\r\n    margin-top : 10px;\r\n    padding : 0px 10px;\r\n    a {\r\n        text-decoration : none;\r\n        h3 {\r\n            margin : 0;\r\n            color : #212121;\r\n        }\r\n        p {\r\n            font-size : 5px;\r\n            padding : 10px 0 0 0;\r\n            color : #787878;\r\n        }\r\n        &:hover {\r\n            h3 {\r\n                color : #0066ff;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n`\r\n\r\nclass List extends Component { \r\n    state = {\r\n        // boards:[],\r\n        boards : [\r\n            {\r\n                no : 1,\r\n                writer : 'jinsu',\r\n                title : '1번글',\r\n                content : \"제곧내\",\r\n                data : new Date(),\r\n            },\r\n            {\r\n                no : 2,\r\n                writer : 'jinsu2',\r\n                title : '2번글',\r\n                content : \"제곧내\",\r\n                data : new Date(),\r\n            }\r\n        ]\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        const {name, value} = e.target;\r\n        this.setState(\r\n            {\r\n                [name] : value,\r\n            }\r\n        );\r\n    };\r\n\r\n    dataAddTest= (e) => {\r\n\r\n    }\r\n\r\n    // 로딩\r\n    loadingData = async() => {\r\n        try{\r\n            const response = await axios.get(\"/board\");\r\n            this.setState({\r\n                //boards : 'test',\r\n                boards : response.data,\r\n            });\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const {loadingData} = this;\r\n        loadingData();\r\n    }\r\n\r\n    render() {\r\n        const { boards } = this.state;\r\n        const { handleChange } = this;\r\n        return (\r\n            <Wrap>\r\n            <div>\r\n            <h2> List </h2>\r\n            {/* 디버그용 json stringfy */}\r\n            {boards && <textarea\r\n                name=\"getBoards2\"\r\n                onChange={handleChange}\r\n                rows={7}\r\n                value={JSON.stringify(boards, null, 2)}\r\n            />}\r\n            {boards.map( (item) => {\r\n                return(\r\n                    <ListItem key={item.key}>\r\n                        <Link to={'/read/${item.id}'}>\r\n                            <h3>{item.title}</h3>\r\n                            <p>{item.content}</p>\r\n                        </Link>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n            <form onSubmit>\r\n\r\n            </form>\r\n            <Button>\r\n                <Link to={'/write'}>글쓰기</Link>\r\n            </Button>\r\n            </div>\r\n            </Wrap>\r\n        );\r\n    }\r\n    \r\n\r\n} \r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\n\r\nclass Testing extends React.Component{\r\n    state = {\r\n        boards :[]\r\n    }\r\n\r\n    loadingData = async() => {\r\n        try{\r\n            const response = await axios.get(\"http://localhost:3000/write\");\r\n            this.setState({\r\n                //boards : 'test',\r\n                boards : response.data,\r\n            });\r\n            console.log(response.data);\r\n        }catch(e){\r\n            console.log('erorr in loadingData :', e);\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const {loadingData} = this;\r\n        loadingData();\r\n    }\r\n\r\n    render(){\r\n        const board = this.state;   // 왜 this.state.boards 가 아니고?\r\n        console.log(board);\r\n        return(\r\n            <div>\r\n                <h2>hi, i'm testing</h2>\r\n                <p>{JSON.stringify(board)}</p>\r\n            </div>\r\n        );\r\n    }\r\n        \r\n}\r\n\r\nexport default Testing;","import React, {useState, useRef} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Number = styled.div`\r\n    width : 100%;\r\n    font-size : 25px;\r\n    border : 1px solid #ccc;\r\n    padding : 5px;\r\n`\r\nconst Button = styled.button`\r\n    display : inline-flex;\r\n    flex-direction : column;\r\n    margin : 5px;\r\n`\r\nconst Input = styled.div`\r\n    border : 1px solid;\r\n    padding : 2px;\r\n    input {\r\n        width : 10px;\r\n    }\r\n`\r\nconst ListItem = styled.div`\r\n    margin : 5px;\r\n    border-top : 1px solid #f33;\r\n    p {\r\n        font-size : 12px;\r\n    }\r\n    button {\r\n        border : 1px solid;\r\n        border-radius : 5px;\r\n    }\r\n`\r\n\r\nfunction OnePageBoard (){\r\n    const [boardData, setBoard] = useState([\r\n    \r\n        {\r\n            title : \"첫글추\",\r\n            content : \"글내용\",\r\n        },\r\n        {\r\n            title : \"두번째 글\",\r\n            content : \"글내용2\",\r\n        }\r\n        \r\n    ]);\r\n    const [inputs, setInputs] = useState(\r\n        {\r\n            title : '',\r\n            content : '',\r\n        }\r\n    );\r\n    const { title, content} = inputs;\r\n    const { board } = boardData;\r\n    const nameInput = useRef();\r\n    \r\n    // onChange : 즉시 value에 반영\r\n    const onChange = e => {\r\n        // e : syntheticBaseEvent / 수많은 이벤트 데이터의 집합.\r\n        // 그 중에 target에는 value(값)과 name(블록name) 등 등 target 블록의 값들이 담겨져있음\r\n        const {value, name} = e.target;\r\n        setInputs({\r\n            ...inputs,          // e.target 값의 name이 title 이면 [title] : value \r\n            [name] : value,     // target name이 content면 [content] : value\r\n        });\r\n    }\r\n    // 게시글 쓰기 \r\n    const post = e => {\r\n        const {value, name} = e.target;\r\n        const newBoard = {\r\n            title,\r\n            content,\r\n        }\r\n        // setBoard(board.concat(newBoard));\r\n        setBoard([...boardData, newBoard]);\r\n        \r\n        setInputs({\r\n            title : '',\r\n            content : ''\r\n        });\r\n    }\r\n    \r\n    const postDelete = (key) => {\r\n        setBoard(boardData.filter(board => board.key !== key));\r\n        // console.log(key);\r\n    }\r\n\r\n    const onRemove = () => {\r\n\r\n    }\r\n\r\n    const resetInput = () => {\r\n        setInputs({\r\n            title : '',\r\n            content : ''\r\n        });\r\n        nameInput.current.focus();\r\n        nameInput.current.value = '';\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h3>카운터</h3>\r\n            <Input>\r\n                <input name=\"title\" placeholder=\"글제목\" ref={nameInput} onChange={onChange}/>\r\n                <input name=\"content\" placeholder=\"내용\"onChange={onChange} />\r\n                <Button onClick={post}> 추가 </Button>\r\n                <Button onClick={resetInput}> 내용 초기화 </Button>\r\n            </Input>\r\n            {boardData.map( (item) => {\r\n                return (\r\n                    <ListItem key={item.key}>\r\n                        <h3>{item.key} : {item.title}</h3>\r\n                        <p>{item.content}</p>\r\n                        <button key={item.key} onClick={ () => postDelete(item.key)}>삭제하기</button>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n            <ListItem>\r\n\r\n            </ListItem>\r\n\r\n            <div><b>값 : </b>{title} ({content})</div>\r\n            <div>{JSON.stringify(board)}</div>\r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default OnePageBoard;\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width : 512px;\r\n    height : 700px;\r\n    margin : 0 auto;  // 페이지 중앙 설정방법\r\n    margin-top : 96px;\r\n    margin-bottom : 32px;\r\n    \r\n    position : relative;\r\n    background : white;\r\n    border-radius : 16px;\r\n    box-shadow : 0 0 8px 0 rgba(0, 0, 0, 0.04); // 오\r\n\r\n    display : flex;\r\n    flex-direction : column;\r\n\r\n`\r\n\r\nfunction TodoTemplate({children}) {\r\n    return(\r\n        <TodoTemplateBlock>{children}</TodoTemplateBlock>\r\n    );\r\n}\r\n\r\nexport default TodoTemplate;","import React, {createContext, useContext, useReducer, useRef} from 'react';\r\n\r\nconst initialTodos = [\r\n    {\r\n        id : 1,\r\n        text : '리액트 배우기',\r\n        done : true,\r\n    },\r\n    {\r\n        id : 2,\r\n        text : '컴포넌트 스타일링',\r\n        done : true,\r\n    },\r\n    {\r\n        id : 3,\r\n        text : '리듀서 배우기',\r\n        done : true,\r\n    }\r\n]\r\n\r\nfunction TodoReducer(state, action) {\r\n    switch(action.type){\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n        case 'TOGGLE':\r\n            return state.map(todo =>\r\n                    todo.id === action.id ? {...todo, done : !todo.done} : todo\r\n                );\r\n        case 'DELETE':\r\n            return state.filter(todo => todo.id !== action.id);\r\n        default :\r\n            throw new Error(`unhandled action type : ${action.type}}`);\r\n    }\r\n\r\n\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({children}) {\r\n    const [state, dispatch] = useReducer(TodoReducer, initialTodos);\r\n    const nextId = useRef(4);\r\n\r\n    return (\r\n        <TodoStateContext.Provider value={state}>\r\n            <TodoDispatchContext.Provider value={dispatch}>\r\n                <TodoNextIdContext.Provider value={nextId}>\r\n                    {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useTodoState(){\r\n    const context = useContext(TodoStateContext);\r\n    // useTodoState 등을 쓰려면 컴포넌트가 TodoProvider 컴포넌트 내부에 있어야하기 때문에, \r\n    // 감싸져있지 않을 때 에러를 리턴하도록 \r\n    if (!context){\r\n        throw new Error('cant find TodoProvider');\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoDispatch(){\r\n    const context =  useContext(TodoDispatchContext);\r\n    if (!context){\r\n        throw new Error('cant find TodoProvider');\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoNextId(){\r\n    const context =  useContext(TodoNextIdContext);\r\n    if (!context){\r\n        throw new Error('cant find TodoProvider');\r\n    }\r\n    return context;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useTodoState} from './TodoContext';\r\n\r\n\r\nconst TodoHeadBlock = styled.div`\r\n    padding : 48px 32px 32px 24px;  // 위 좌우 아래 순서\r\n    border-bottom : 1px solid #e9e9e9;  // #ffffff 에 가까울수록 하얀색\r\n    h1{\r\n        margin : 0;\r\n        font-size : 36px;\r\n        color : #343a40;\r\n    }\r\n    // 클래스 네임 참조 = .className\r\n    .day {\r\n        margin-top : 4px;\r\n        color : #868e96;\r\n        font-size : 21px;\r\n    }\r\n    .tasks-left {\r\n        margin-top : 40px;\r\n        color : #20c997;\r\n        font-size : 18px;\r\n        font-weight : bold;\r\n    }\r\n`\r\n\r\nfunction TodoHead(){\r\n    const todos = useTodoState();\r\n    const remains = todos.filter(todos => !todos.done);\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString('ko-KR', {\r\n        year : 'numeric',\r\n        month : 'long',\r\n        day : 'numeric',\r\n    })\r\n    const dayName = today.toLocaleDateString('ko-KR', { weekday : 'long'});\r\n    // 왜 dateString.month 로 접근은 못할까?\r\n    return (\r\n        <TodoHeadBlock>\r\n            <h1>{dateString}</h1>\r\n            <div className=\"day\">날짜 : {dayName}</div>\r\n            <div className=\"tasks-left\">할 일 {remains.length}개 남음</div>\r\n        </TodoHeadBlock>\r\n    );\r\n}\r\n\r\nexport default TodoHead;","import React from 'react';\r\n// https://react-icons.github.io/react-icons/\r\nimport {MdDone, MdDelete} from 'react-icons/md';    \r\nimport styled, {css} from 'styled-components';\r\nimport {useTodoDispatch} from './TodoContext';\r\n\r\nconst Remove = styled.div`\r\n    display : flex;\r\n    align-items : center;\r\n    justify-content : center;\r\n    color : #fea2e6;\r\n    font-size : 24px;\r\n    cursor : pointer;\r\n    &:hover {\r\n        color : #ff6b6b;\r\n    }\r\n    display : none;     // 오. 이걸로 어떻게 커서가 들어왔을때만 활성화되지? -> 아래 :hover display : initial 때문에 가능\r\n`\r\n\r\nconst TodoItemBlock = styled.div`\r\n    display : flex;\r\n    align-items : center;\r\n    padding-top : 12px;\r\n    padding-bottom : 12px;\r\n    &:hover {\r\n        ${Remove} {\r\n            display : flex; // initial이랑 flex랑 같은듯?\r\n        }\r\n    }\r\n`\r\n\r\nconst CheckCircle = styled.div`\r\n    display : flex; //\r\n    width : 24px;\r\n    height : 24px;\r\n    font-size : 18px;\r\n\r\n    align-items : center;\r\n    justify-content : center;\r\n    margin-right : 20px;\r\n    \r\n    border : 1px solid #ced4d4;\r\n    border-radius : 25px;\r\n\r\n    cursor : pointer;\r\n    ${props =>  \r\n        props.done && \r\n        css `\r\n            border : 1px solid #38d9d9;\r\n            color : #38d9d9;\r\n            // border, color 둘다 파란색\r\n        `\r\n\r\n    }\r\n`\r\n\r\nconst Text = styled.div`\r\n    flex : 1;\r\n    font-size : 24px;\r\n    color : #494960;    \r\n    ${props =>\r\n        props.done &&\r\n        css `\r\n            color : #ced4d4;\r\n            text-decoration : line-through;\r\n        `\r\n    }\r\n    \r\n`\r\n\r\nfunction TodoItem({id, done, text}) {\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () => dispatch({type : 'TOGGLE', id});\r\n    const onDelete = () => dispatch({type : 'DELETE', id});\r\n\r\n    return (\r\n        <TodoItemBlock>\r\n            {/* done 이면 <MdDone/> 적용 */}\r\n            <CheckCircle done={done} onClick={onToggle} >\r\n                { done && <MdDone/> }\r\n            </CheckCircle>    \r\n            <Text done={done}>{text}</Text>\r\n            <Remove onClick={onDelete}>\r\n                <MdDelete />\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    );\r\n}\r\n\r\n\r\n// export default TodoItem;\r\nexport default React.memo(TodoItem);    // -> memorize로 불필요한 리렌더링 방지","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport {useTodoState} from './TodoContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n    flex : 1;    // ? -> 자신이 차지할 수 있는 영역은 꽉 채우도록\r\n    padding : 20px 32px;\r\n    overflow-y : auto;  // 오\r\n    // background : gray;\r\n`\r\n\r\nfunction TodoList() {\r\n    const todos = useTodoState();\r\n    // useState로 todo를 가져와서 map \r\n    return(\r\n        <TodoListBlock>\r\n            {todos.map( todo =>\r\n                <TodoItem\r\n                    key={todo.id}\r\n                    id={todo.id}\r\n                    text={todo.text}\r\n                    done={todo.done}\r\n                />\r\n            )}\r\n            \r\n        </TodoListBlock> \r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport {MdAdd} from 'react-icons/md';\r\nimport {useTodoDispatch, useTodoNextId} from './TodoContext';\r\n\r\n\r\nconst CircleButton = styled.button`\r\n    background : #32d4e3;\r\n    &:hover {\r\n        background : #26c1a1;\r\n    }\r\n    &:active {\r\n        background : #20c997;\r\n    }\r\n\r\n    cursor : pointer;\r\n    width : 80px;\r\n    height : 80px;\r\n    border-radius : 50%;\r\n    border : none;\r\n    align-items : center;\r\n    justify-content : center;\r\n    display : block;\r\n    /* z-index : 5; */\r\n    font-size : 60px;\r\n    color : white;\r\n\r\n    position : absolute;\r\n    left : 50%;\r\n    bottom : 0px;\r\n    transform : translate(-50%, 50%);   // ??\r\n\r\n    outline : none; // border : none 과 같지않나?\r\n    display : flex;\r\n\r\n    transition : 0.125s all ease-out;   // 모든 트랜지션 (hover 포함)에 0.125s \r\n    ${props =>\r\n        props.open && \r\n        css `\r\n            background : #ff6b6b;\r\n            &:hover {\r\n                background : #ff8787;\r\n            }\r\n            &:active {\r\n                background : #fa5252;\r\n            }\r\n            transform : translate(-50%, 50%) rotate(45deg);\r\n        `\r\n    }\r\n    \r\n`\r\n// 구찮아서 인서트 폼은 일단 복붙\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding-left: 32px;\r\n  padding-top: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 72px;\r\n\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction TodoCreate() {\r\n    const [open, setOpen] = useState(false);    // 기본값은 false로\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useTodoDispatch();\r\n    const nextId = useTodoNextId();        \r\n    \r\n    const onToggle = () => setOpen(!open);\r\n    const onChange = e => setValue(e.target.value);\r\n    const onSubmit = e => {\r\n        e.preventDefault(); // 새로고침 방지\r\n\r\n        dispatch({\r\n            type : 'CREATE',\r\n            todo : {\r\n                id : nextId.current,\r\n                text: value,\r\n                done : false,\r\n            }\r\n        })\r\n        setValue('');\r\n        setOpen(false);\r\n        nextId.current = nextId.current + 1;\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {open && (\r\n                <InsertFormPositioner>\r\n                    <InsertForm onSubmit={onSubmit}>\r\n                        <Input autoFocus \r\n                            placeholder=\" - 여기에 할 일을 입력 - \" \r\n                            onChange={onChange}\r\n                            value={value}\r\n                        />\r\n                    </InsertForm>\r\n                </InsertFormPositioner>\r\n            )}\r\n            <CircleButton onClick={onToggle} open={open}>\r\n                <MdAdd  />\r\n            </CircleButton>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default TodoCreate;","import React from 'react';\r\nimport styled, {createGlobalStyle} from 'styled-components';\r\nimport TodoTemplate from './TodoTemplate';\r\nimport TodoHead from './TodoHead';\r\nimport TodoList from './TodoList';\r\nimport TodoCreate from './TodoCreate';\r\n\r\nimport {TodoProvider} from './TodoContext';\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    body {\r\n        background : #e9ecef;\r\n    }\r\n`\r\n\r\nfunction TodoApp() {\r\n    return(\r\n        <div>\r\n        <TodoProvider>\r\n            <GlobalStyle/>  \r\n            <TodoTemplate>\r\n                <TodoHead>todo head</TodoHead>\r\n                <TodoList></TodoList>\r\n                <TodoCreate></TodoCreate>\r\n            </TodoTemplate>\r\n        </TodoProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoApp;\r\n","import React from 'react';\r\nimport Read from './Read';\r\nimport Write from './Write';\r\nimport List from './List';\r\nimport Testing from './Testing';\r\nimport OnePageBoard from './OnePageBoard';\r\nimport TodoApp from './TodoComponents/TodoApp';\r\nimport {Route, Link} from 'react-router-dom';\r\n\r\nclass App extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            {/* <div> testing </div> */}\r\n            <div className='lnk'>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/board\">List</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/read\">Read</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/write\">Write</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to='/test'>Testing</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to='/oneboard'>One Board</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to='/todo'>Todo List</Link>\r\n                    </li>\r\n                </ul>\r\n            </div> \r\n            <div className=\"route\">\r\n                <Route exact path=\"/board\" component={List} />\r\n                <Route path=\"/read\" component={Read} />\r\n                <Route path=\"/write\" component={Write} />\r\n                <Route path='/test' component={Testing} />\r\n                <Route path='/oneboard' component={OnePageBoard} />\r\n                <Route path='/todo' component={TodoApp} />\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n        \r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './Board/App';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null,\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n        <button className=\"square\" onClick={ () => this.props.onClick() }>\r\n            {/* {this.props.value} */}\r\n            {/* {this.state.value} */}\r\n            {this.props.value}\r\n        </button>\r\n        );\r\n    }\r\n}\r\n// Square 클래스와 같은 기능?\r\nfunction Squaref(props){\r\n    return(\r\n        <button className=\"square\" onClick={ () => props.onClick()}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares : Array(8).fill(0),\r\n        }\r\n    }\r\n    renderSquare(i) {\r\n        // return <Square value={i}/>;\r\n        return (\r\n            <Square \r\n                value = {this.props.squares[i]}\r\n                // onClick = { () => this.handleClick(i)}  \r\n                onClick = { () => this.props.onClick(i)}  \r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div>\r\n                {/* {boardSquare} */}\r\n\r\n                <div className=\"board-row\">\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n            );\r\n        \r\n    }\r\n}\r\n\r\nfunction WinnerCheck(squares){\r\n    const winMatch = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ]\r\n    for (let i = 0; i < winMatch.length; i++) {\r\n        const [a, b, c] = winMatch[i];\r\n        // \r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history : [{\r\n                squares: Array(8).fill(null)\r\n            }],\r\n            xIsNext : true,\r\n            stepNumber : 0,\r\n        }\r\n    }\r\n    // board 에서 game으로 이동한 handleClick\r\n    handleClick(i) {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1]\r\n        const squares = current.squares.slice();\r\n        // 이긴 게임이거나 || squares[i] 가 null(빈칸)이 아니면\r\n        if (WinnerCheck(squares) || squares[i]) {\r\n            return; // 클릭 액션 x\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        // 조금 복잡한 setState구문 \r\n        this.setState({\r\n            history : history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber : history.length,\r\n            xIsNext : !this.state.xIsNext,\r\n        });\r\n    }\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber : step,\r\n            xIsNext : (step) % 2 === 0  // 짝수면 true(x) 홀수면 false(o) 이므로\r\n        })\r\n    }\r\n    render() {  \r\n        const history = this.state.history;\r\n        const currentBoard = history[this.state.stepNumber];\r\n        const winner = WinnerCheck(currentBoard.squares);\r\n        let status;\r\n        if (winner) {\r\n            status = 'winner is : ' + winner;\r\n        }else{\r\n            status = 'Next Player : ' + (this.state.xIsNext ? 'X' : 'O' ) + ' / ' + this.state.xIsNext;\r\n        }\r\n\r\n        const moves = history.map( (step, move) => {\r\n            const description = move ? \"Go to  move # \" + move : \"Go to Start\";\r\n            const stepDebug = 'step : ' + step + ' // move : ' + move;\r\n            if (move == this.state.stepNumber) {\r\n                return (\r\n                    <li key={move}>\r\n                        current step\r\n                    </li>\r\n                )\r\n            }else {\r\n                return (\r\n                    <li key={move}>\r\n                        <button onClick={ () => this.jumpTo(move)}>{description} + {stepDebug}</button>\r\n                    </li>\r\n                );\r\n            }\r\n            \r\n        });\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board \r\n                squares = {currentBoard.squares} \r\n                onClick = {(i) => this.handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    // <Game />,\r\n    // <App />,\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}