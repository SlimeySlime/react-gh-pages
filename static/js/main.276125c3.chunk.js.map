{"version":3,"sources":["index.js"],"names":["Square","props","state","value","className","onClick","this","React","Component","Board","squares","Array","fill","i","boardSquare","map","data","index","renderSquare","WinnerCheck","winMatch","length","a","b","c","Game","history","xIsNext","stepNumber","slice","setState","concat","step","status","currentBoard","winner","moves","move","description","stepDebug","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.276125c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null,\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n        <button className=\"square\" onClick={ () => this.props.onClick() }>\r\n            {/* {this.props.value} */}\r\n            {/* {this.state.value} */}\r\n            {this.props.value}\r\n        </button>\r\n        );\r\n    }\r\n}\r\n// Square 클래스와 같은 기능?\r\nfunction Squaref(props){\r\n    return(\r\n        <button className=\"square\" onClick={ () => props.onClick()}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares : Array(8).fill(0),\r\n        }\r\n    }\r\n    renderSquare(i) {\r\n        // return <Square value={i}/>;\r\n        return (\r\n            <Square \r\n                value = {this.props.squares[i]}\r\n                // onClick = { () => this.handleClick(i)}  \r\n                onClick = { () => this.props.onClick(i)}  \r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const boardSquare = this.state.squares;\r\n        for(let i = 0; i < 3; i++) {\r\n            (<div></div>)\r\n        }\r\n        const boardHtml = boardSquare.map( (data, index) => {\r\n            {this.renderSquare(index)}\r\n        });\r\n\r\n        return (\r\n            \r\n            <div>\r\n                {boardSquare}\r\n\r\n                {/* <div className=\"board-row\">\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n                </div> */}\r\n            </div>\r\n            );\r\n        \r\n    }\r\n}\r\n\r\nfunction WinnerCheck(squares){\r\n    const winMatch = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ]\r\n    for (let i = 0; i < winMatch.length; i++) {\r\n        const [a, b, c] = winMatch[i];\r\n        // \r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history : [{\r\n                squares: Array(8).fill(null)\r\n            }],\r\n            xIsNext : true,\r\n            stepNumber : 0,\r\n        }\r\n    }\r\n    // board 에서 game으로 이동한 handleClick\r\n    handleClick(i) {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1]\r\n        const squares = current.squares.slice();\r\n        // 이긴 게임이거나 || squares[i] 가 null(빈칸)이 아니면\r\n        if (WinnerCheck(squares) || squares[i]) {\r\n            return; // 클릭 액션 x\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        // 조금 복잡한 setState구문 \r\n        this.setState({\r\n            history : history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber : history.length,\r\n            xIsNext : !this.state.xIsNext,\r\n        });\r\n    }\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber : step,\r\n            xIsNext : (step) % 2 === 0  // 짝수면 true(x) 홀수면 false(o) 이므로\r\n        })\r\n    }\r\n    render() {  \r\n        const history = this.state.history;\r\n        const currentBoard = history[this.state.stepNumber];\r\n        const winner = WinnerCheck(currentBoard.squares);\r\n        let status;\r\n        if (winner) {\r\n            status = 'winner is : ' + winner;\r\n        }else{\r\n            status = 'Next Player : ' + (this.state.xIsNext ? 'X' : 'O' ) + ' / ' + this.state.xIsNext;\r\n        }\r\n\r\n        const moves = history.map( (step, move) => {\r\n            const description = move ? \"Go to  move # \" + move : \"Go to Start\";\r\n            const stepDebug = 'step : ' + step + ' // move : ' + move;\r\n            if (move == this.state.stepNumber) {\r\n                return (\r\n                    <li key={move}>\r\n                        current step\r\n                    </li>\r\n                )\r\n            }else {\r\n                return (\r\n                    <li key={move}>\r\n                        <button onClick={ () => this.jumpTo(move)}>{description} + {stepDebug}</button>\r\n                    </li>\r\n                );\r\n            }\r\n            \r\n        });\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board \r\n                squares = {currentBoard.squares} \r\n                onClick = {(i) => this.handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}