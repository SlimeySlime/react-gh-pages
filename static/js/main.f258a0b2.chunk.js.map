{"version":3,"sources":["Board/Read.js","Board/Write.js","Board/List.js","Board/App.js","index.js"],"names":["Read","React","Component","Write","List","App","className","to","exact","path","component","Square","props","state","value","onClick","this","Board","squares","Array","fill","i","renderSquare","WinnerCheck","winMatch","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"uOAYeA,E,4JATX,WACI,OACI,2C,GAHOC,IAAMC,WCUVC,E,4JATX,WACI,OACI,4C,GAHQF,IAAMC,WCMXE,E,4JALX,WACI,OAAO,2C,GAFIF,a,OCkCJG,E,4JA5BX,WACI,OACI,gCAEA,qBAAKC,UAAU,MAAf,SACI,+BACI,6BACI,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,QAAT,oBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,SAAT,0BAIZ,sBAAKD,UAAU,QAAf,UACI,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,QAAQC,UAAWV,IACrC,cAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,SAASC,UAAWP,c,GAtBpCF,IAAMC,WCAlBS,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,MAHI,E,0CAMnB,WAAU,IAAD,OACL,OACA,wBAAQR,UAAU,SAASS,QAAU,kBAAM,EAAKH,MAAMG,WAAtD,SAGKC,KAAKJ,MAAME,Y,GAZHb,IAAMC,W,IA0BrBe,E,kDACF,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTK,QAAUC,MAAM,GAAGC,KAAK,IAHb,E,gDAMnB,SAAaC,GAAI,IAAD,OAEZ,OACI,cAAC,EAAD,CACIP,MAASE,KAAKJ,MAAMM,QAAQG,GAE5BN,QAAY,kBAAM,EAAKH,MAAMG,QAAQM,Q,oBAKjD,WACI,OAEI,gCAGI,sBAAKf,UAAU,YAAf,UACCU,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,MAEnB,sBAAKhB,UAAU,YAAf,UACCU,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,MAEnB,sBAAKhB,UAAU,YAAf,UACCU,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,a,GArCfrB,IAAMC,WA6C1B,SAASqB,EAAYL,GAWjB,IAVA,IAAMM,EAAW,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFH,EAAI,EAAGA,EAAIG,EAASC,OAAQJ,IAAK,CAAC,IAAD,cACpBG,EAASH,GADW,GAC/BK,EAD+B,KAC5BC,EAD4B,KACzBC,EADyB,KAGtC,GAAIV,EAAQQ,IAAMR,EAAQQ,KAAOR,EAAQS,IAAMT,EAAQQ,KAAOR,EAAQU,GAClE,OAAOV,EAAQQ,GAGvB,OAAO,KAGQzB,IAAMC,UAoFvB2B,IAASC,OAGP,cAAC,IAAD,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.f258a0b2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Read extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                read\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Read;","import React from 'react';\r\n\r\nclass Write extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                write\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Write;","import React, { Component } from 'react'; \r\n\r\nclass List extends Component { \r\n    render() {\r\n        return <div>List</div>; \r\n    }\r\n} \r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport Read from './Read';\r\nimport Write from './Write';\r\nimport List from './List';\r\nimport {Route, Link} from 'react-router-dom';\r\n\r\nclass App extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            {/* <div> testing </div> */}\r\n            <div className='lnk'>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/\">List</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/read\">Read</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/write\">Write</Link>\r\n                    </li>\r\n                </ul>\r\n            </div> \r\n            <div className=\"route\">\r\n                <Route exact path=\"/\" component={List} />\r\n                <Route exact path=\"/read\" component={Read} />\r\n                <Route exact path=\"/wrtie\" component={Write} />\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n        \r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './Board/App';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null,\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n        <button className=\"square\" onClick={ () => this.props.onClick() }>\r\n            {/* {this.props.value} */}\r\n            {/* {this.state.value} */}\r\n            {this.props.value}\r\n        </button>\r\n        );\r\n    }\r\n}\r\n// Square 클래스와 같은 기능?\r\nfunction Squaref(props){\r\n    return(\r\n        <button className=\"square\" onClick={ () => props.onClick()}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares : Array(8).fill(0),\r\n        }\r\n    }\r\n    renderSquare(i) {\r\n        // return <Square value={i}/>;\r\n        return (\r\n            <Square \r\n                value = {this.props.squares[i]}\r\n                // onClick = { () => this.handleClick(i)}  \r\n                onClick = { () => this.props.onClick(i)}  \r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div>\r\n                {/* {boardSquare} */}\r\n\r\n                <div className=\"board-row\">\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n            );\r\n        \r\n    }\r\n}\r\n\r\nfunction WinnerCheck(squares){\r\n    const winMatch = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ]\r\n    for (let i = 0; i < winMatch.length; i++) {\r\n        const [a, b, c] = winMatch[i];\r\n        // \r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history : [{\r\n                squares: Array(8).fill(null)\r\n            }],\r\n            xIsNext : true,\r\n            stepNumber : 0,\r\n        }\r\n    }\r\n    // board 에서 game으로 이동한 handleClick\r\n    handleClick(i) {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1]\r\n        const squares = current.squares.slice();\r\n        // 이긴 게임이거나 || squares[i] 가 null(빈칸)이 아니면\r\n        if (WinnerCheck(squares) || squares[i]) {\r\n            return; // 클릭 액션 x\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        // 조금 복잡한 setState구문 \r\n        this.setState({\r\n            history : history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber : history.length,\r\n            xIsNext : !this.state.xIsNext,\r\n        });\r\n    }\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber : step,\r\n            xIsNext : (step) % 2 === 0  // 짝수면 true(x) 홀수면 false(o) 이므로\r\n        })\r\n    }\r\n    render() {  \r\n        const history = this.state.history;\r\n        const currentBoard = history[this.state.stepNumber];\r\n        const winner = WinnerCheck(currentBoard.squares);\r\n        let status;\r\n        if (winner) {\r\n            status = 'winner is : ' + winner;\r\n        }else{\r\n            status = 'Next Player : ' + (this.state.xIsNext ? 'X' : 'O' ) + ' / ' + this.state.xIsNext;\r\n        }\r\n\r\n        const moves = history.map( (step, move) => {\r\n            const description = move ? \"Go to  move # \" + move : \"Go to Start\";\r\n            const stepDebug = 'step : ' + step + ' // move : ' + move;\r\n            if (move == this.state.stepNumber) {\r\n                return (\r\n                    <li key={move}>\r\n                        current step\r\n                    </li>\r\n                )\r\n            }else {\r\n                return (\r\n                    <li key={move}>\r\n                        <button onClick={ () => this.jumpTo(move)}>{description} + {stepDebug}</button>\r\n                    </li>\r\n                );\r\n            }\r\n            \r\n        });\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board \r\n                squares = {currentBoard.squares} \r\n                onClick = {(i) => this.handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    // <Game />,\r\n    // <App />,\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}